export class MyComboTree extends Component {  //class的名称必须大写字母开头
  constructor(props) {
    super(props);
    //可以有三种方式接受参数
    //调用方式1：<MyTextBox params='stuname,学生姓名,72, 70, 20, 28,240,诸葛孔明, ,' />
    //调用方式2：<MyTextBox attr={{id:"unitprice", label: "单价", labelwidth: 72, left: 20, top: 20+5*rowheight, width: 200}} ref={ref => this.unitprice = ref} />
    //调用方式3：<MyTextBox id='supplierid' label='供应商' labelwidth='72' top={20+7*rowheight} left='20' width='200' ref={ref => this.supplierid = ref} addonRight={this.addon.bind(this, 'help')} />
    //let params=this.props.params;  
    // attr=this.props.attr;
    let attr={};
    attr.items='';
    attr.sqlparams={};
    if (this.props.attr!=undefined && typeof this.props.attr==='object'){
       attr={...attr, ...this.props.attr};
    }
    if (this.props.params!=undefined && typeof this.props.params==='string'){
      //将字符串转换成json对象。参数逗号间隔，例如'filter,快速过滤, 72, 2, 16,0, 300,,'
      let tmp=this.props.params.split(';'); //id, label, labelwidth, top, left, height, width, value, items, textfield, value style 
      for (let i=0; i<tmp.length; i++) tmp[i]=tmp[i].trim();
      if (tmp.length>0) attr.id=tmp[0];
      if (tmp.length>1) attr.label=tmp[1];
      if (tmp.length>2) attr.labelwidth=tmp[2];
      if (tmp.length>3) attr.top=tmp[3];
      if (tmp.length>4) attr.left=tmp[4];
      if (tmp.length>5) attr.height=tmp[5];
      if (tmp.length>6) attr.width=tmp[6];
      attr.items='';
      if (tmp.length>7){
        if (typeof tmp[7]==='object'){
           attr.sqlparams={...tmp[7]};
        }else{
          attr.items=tmp[7];  
        }
      } 
      if (tmp.length>8) attr.textfield=tmp[8];
      if (tmp.length>9) attr.value=tmp[9];
      if (tmp.length>10) attr.style=tmp[10];
    }
    attr={...attr, ...this.props};  //
    if (attr.top!==undefined && isNaN(attr.top)) attr.top=eval(attr.top); 
    if (attr.left!==undefined && isNaN(attr.left)) attr.left=eval(attr.left); 
    if (attr.height!==undefined && isNaN(attr.height)) attr.height=eval(attr.height);
    if (attr.width!==undefined && isNaN(attr.width)) attr.width=eval(attr.width);
    if (attr.height === undefined || parseInt(attr.height) === 0) attr.height=28;
    if (attr.width === undefined || parseInt(attr.width) === 0) attr.width=200;
    attr.top=parseInt(attr.top);
    attr.left=parseInt(attr.left);
    attr.height=parseInt(attr.height);
    attr.width=parseInt(attr.width);
    attr.labelwidth=parseInt(attr.labelwidth);
    if (attr.label === undefined) attr.label='';
    if (attr.textfield === undefined || attr.textfield === '') attr.textfield=attr.id;    
    if (attr.style === undefined) attr.style='';
    attr.style=';'+attr.style+';';
    if (attr.label!=='') attr.label+=':';
    attr.editable=false;
    if (attr.style.indexOf(';editable;')>=0) attr.editable=true; 
    if (attr.value===undefined) attr.value='';
    if (attr.panelwidth===undefined) attr.panelwidth=attr.width;
    //取值
    //console.log(666,attr.items);
    //console.log(667,attr.sqlparams);
    let data=[];
    if (attr.items!==undefined && attr.items!=''){
      let arr=attr.items.split(';');
      data = arr.map((item, index)=> {
        return ({[attr.id]:item, [attr.textfield]:item, index:index})
      })
    }
    if (attr.value===undefined || attr.value===''){
      if (data.length>0) attr.value=data[0][attr.id];
      else attr.value=null;
    }
    console.log(230, attr);
    this.state = {
       attr: attr,
       value: attr.value,
       data: data
    }
  }

  async componentDidMount(){
    if (this.state.attr.sqlparams.sqlprocedure!==undefined){
      //从数据库中提取数据
      let p={...this.state.attr.sqlparams};
      let rs = await reqdoTree(p); //1.获取到数据
      this.setState({data: rs.rows});
      console.log(555,rs.rows)
    }
  }
  //构造自定义对象
  render() {
    let { id, label, labelwidth, top, left, height, width, items, sql, textfield, value, style, editable, panelwidth } = this.state.attr;    
    return (
       <div style={{position:'absolute', top:top, left:left}}>
          <Label htmlFor={id} className="labelStyle" >{label}</Label>
          <ComboTree inputId={id} id={id} data={this.state.data} value={this.state.value} style={{width:width, height:height}} 
          valueField={id} textField={textfield} editable={editable} panelStyle={{ width: panelwidth }} 
          onChange={(value) => this.setState({value: value })} />
       </div>
    )
  }
}
